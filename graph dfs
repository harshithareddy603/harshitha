#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int stack[MAX];
int top = -1;

void push(int item) {
    stack[++top] = item;
}

int pop() {
    return stack[top--];
}

int isEmpty() {
    return top == -1;
}

struct Node {
    int vertex;
    struct Node* next;
};

struct Node* graph[MAX];
int visited[MAX];

void initializeGraph(int vertices) {
    for (int i = 0; i < vertices; i++) {
        graph[i] = NULL;
        visited[i] = 0;
    }
}

void addEdge(int src, int dest) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = dest;
    newNode->next = graph[src];
    graph[src] = newNode;
}

void DFS(int vertex) {
    struct Node* temp = graph[vertex];
    visited[vertex] = 1;
    printf("%d ", vertex);

    while (temp != NULL) {
        int connectedVertex = temp->vertex;

        if (!visited[connectedVertex]) {
            DFS(connectedVertex);
        }
        temp = temp->next;
    }
}

int main() {
    int vertices, edges, src, dest;

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    initializeGraph(vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    for (int i = 0; i < edges; i++) {
        printf("Enter edge %d (source destination): ", i + 1);
        scanf("%d %d", &src, &dest);
        addEdge(src, dest);
    }

    printf("Depth First Search Traversal: ");
    DFS(0);

    return 0;
}
